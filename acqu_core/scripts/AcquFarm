#!/bin/sh
# Give the args some sensible names
SetupFile=$1
JobName=$2
FileList=$3


####################################################
###### Beginning of section requiring editing ######
####################################################

# Location of experiment or MC data files on the farm
InputDir="/local/raid1/A2/rundata/2014-07_EPT_Prod/"

# Location of output root and log files
OutputDir="/local/raid1/work/${USER}/analysis/${JobName}"

# Who'll get the emails from the farm
MailAddress="$USER@kph.uni-mainz.de"

####################################################
###### End of section requiring editing ############
####################################################


#No of Acqu data files in each job
RunsPerJob="1"

#get the name of this executable
exe=`basename $0`

#the maximum time the job will be allowed HH:MM:SS
#This is the max allowed on the batch_x86 queue.
#Set high in case 
WALLTIME=2:00:00

print_usage(){
    echo
    echo "Usage:"
    echo "$exe <AcquRootSetup> <JobName> <FileList>"
    echo
    echo "<AcquRootSetup>: Top level AcquRoot setup file"
    echo "<JobName>:       A directory jobs/<JobName> will be created"
    echo "                 if it doesn't exist and scripts put there"
    echo "<FileList>:      (Optional) list of files to run, otherwise"
    echo "                 run files in <AcquRootSetup> file"
    echo "Examples: "
    echo "$exe data/Offline-CBTaggTaps.dat myjob"
    echo "$exe data/MC-CBTaggTaps.dat myjob"
    echo "$exe data/MC-CBTaggTaps.dat myjob MCFiles.dat"
}

# Check that we have all the args, otherwise print use
if [ $# -lt 2 ]; then
    print_usage;
    exit 0;
fi

MainDir=`pwd`

# Make some subdirectories for job and setup files
JobDir="jobs/$JobName"
mkdir -p $JobDir
mkdir -p "$JobDir/jobfiles"

mkdir -p $OutputDir
mkdir -p "${OutputDir}/root"
mkdir -p "${OutputDir}/log"


# If there's no file list specified then scan config files or input directory
if [ $# -lt 3 ]; then
    FileList="${JobDir}/FileList.dat"

    # Scan top config file for MC 'TreeFile' lines
    gawk -v n="$RunsPerJob" '{if($1=="TreeFile:"){printf"%s ",$2;if(c++ ==n-1){printf"\n";c=0}}}END{if(c!=0)printf"\n"}' $SetupFile > $FileList

    # If 'FileList.dat' is still empty check for a server file
    if [ ! -s $FileList ]; then
	ServerFile=`gawk '{if($1=="ServerSetup:")print $2}' $SetupFile`
	if [ ! -z $ServerFile ]; then
	    # mimic the AcquRoot behaviour of prepending ./data/ to 
	    # relative files
	    if [[ ! $ServerFile == */* ]]; then
		ServerFile="data/${ServerFile}"
	    fi
	    # Check that Server file exists
	    if [ -e $ServerFile ]; then
		echo "Found ServerFile $ServerFile"
		# Scan server file for experiment 'File-Directory' line
		ConfigDir=`gawk '{if($1=="File-Directory:")print $2}' $ServerFile`

		# If File-Directory line existed and InputDir was either not specified or doesn't exist, use this directory
		if [ ! -z $ConfigDir ]; then
		    if [ -z $InputDir ]
		    then InputDir=$ConfigDir
		    elif [ ! -d $InputDir ]
		    then InputDir=$ConfigDir
		    fi
		fi

		# Scan server file for experiment 'File-Name' lines
		gawk -v n="$RunsPerJob" '{if($1=="File-Name:"){printf"%s ",$2;if(c++ ==n-1){printf"\n";c=0}}}END{if(c!=0)printf"\n"}' $ServerFile > $FileList
	    fi
	fi
    fi

    # If 'FileList.dat' is still empty scan input directory
    if [ ! -s $FileList ]; then
	echo "Scanning input directory..."
	ls -1 $InputDir/ | grep ".root\|.dat" | grep -v ".xml$" > $FileList
    fi    
fi

# Make a main setup file template with all non-comment lines 
AcquSetup="${JobDir}/AcquSetup.dat"
echo "#AcquRoot setup file created automatically using AcquFarm with $SetupFile as basis." > $AcquSetup
echo "#All unnecessary lines are stripped out"  >> $AcquSetup
gawk '{if(($1!~"Directory:")&&($1!~"BatchDir:")&&($1!~"TreeFile:")&&($1!~"#"))print $0}' $SetupFile >> $AcquSetup
# check if UseDirectIO: mode, this determines the number of needed CPUs 
DirectIO=`grep 'UseDirectIO:' $SetupFile | grep -cv '^#'`


# Loop over each line and create the job files
# each line is like this: "CBTaggTAPS_500.dat CBTaggTAPS_501.dat ....."
while read line         
do

    # Set individual file name and directory
    File=`basename $line`
    echo "Making a job for File: $File";
    FileDir=$InputDir

    # If input file doesn't exist in InputDir...
    if [ ! -e $FileDir/$File ]; then
        # check for input directory in file line
	FileDir=`dirname $line`
	# If input file doesn't exist in this directory...
	if [ ! -e $FileDir/$File ]; then
	    # check for input directory from config file
	    FileDir=$ConfigDir
	    # If input file doesn't exist in this directory...
	    if [ ! -e $FileDir/$File ]; then
		# reset to original input directory
		FileDir=$InputDir
	    fi
	fi
    fi
        
    # Strip off the input suffix, and any directory paths
    BaseName=`basename $File | sed 's/.root//' | sed 's/.dat//' | sed 's/.xz//'`
    JobFile="${JobDir}/jobfiles/$BaseName.sub"
    NodeDir="/scratch/${USER}/${BaseName}"
    RunNumber=`echo $BaseName | sed -r 's/.*_([0-9]*)$/\1/g'`
    # Check for running compressed files
    CompFile=`echo $File | grep -c ".xz"`

	#default queue
	OptQueue="batch_x86_64"
	
	#use 1 cpu per default
	OptNCpu=1

	# if not DirectIO and we have compressed file, use 2 CPUs
    if [ $DirectIO -eq 0 -a $CompFile -eq 1 ]
    then
		OptQueue="batch"
		OptNCpu=2
    fi

    #now make the job file
	cat > "${JobFile}" << EOF 
#!/bin/sh
#PBS -N Acqu_${RunNumber}

## Send eMail if job aborts
#PBS -m a

## Send eMail when job starts
##PBS -m b

## Send eMail if job ends
##PBS -m e

#PBS -M ${MailAddress}
#PBS -V
#PBS -l walltime=${WALLTIME}
#PBS -e ${JobDir}/jobfiles
#PBS -o ${JobDir}/jobfiles
#PBS -q ${OptQueue}
#PBS -l ncpus=${OptNCpu}
#
#InputDir: $FileDir
#InputFile: $File
#
export ACQU_MAINDIR="${MainDir}"
export ACQU_SETUPFILE="${AcquSetup}"
export ACQU_INPUTDIR="${FileDir}"
export ACQU_OUTPUTDIR="${OutputDir}"
export ACQU_BASENAME="${BaseName}"
export ACQU_NODEDIR="${NodeDir}"
export ACQU_INPUTFILE="${File}"
export PATH+=\$PBS_O_PATH
#
#This is the executable that gets run on the node
AcquNode
##end of job script
EOF

    chmod +x $JobFile;
    
done < $FileList

TopJob=`ls -1 -r ${JobDir}/jobfiles/*.sub | tail -1`

echo
echo "Job submission scripts are in ${JobDir}/jobfiles."
echo 
echo "Running AcquHierarchy $AcquSetup:"
echo
AcquHierarchy $AcquSetup
echo 
echo "Please check that the result looks sensible"
echo 
echo "Here's the corrseponding job submission script:"
echo "cat $TopJob"
echo
cat $TopJob

echo
echo
